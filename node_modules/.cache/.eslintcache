[{"/Users/vicenteriquelme/Code/digital-nudge-tool/src/index.js":"1","/Users/vicenteriquelme/Code/digital-nudge-tool/src/reportWebVitals.js":"2","/Users/vicenteriquelme/Code/digital-nudge-tool/src/App.js":"3","/Users/vicenteriquelme/Code/digital-nudge-tool/src/components/questions.js":"4","/Users/vicenteriquelme/Code/digital-nudge-tool/src/components/popupAlert.js":"5","/Users/vicenteriquelme/Code/digital-nudge-tool/src/components/medicalTexts.js":"6","/Users/vicenteriquelme/Code/digital-nudge-tool/src/components/answers.js":"7","/Users/vicenteriquelme/Code/digital-nudge-tool/src/Main.js":"8","/Users/vicenteriquelme/Code/digital-nudge-tool/src/components/disclaimer.js":"9","/Users/vicenteriquelme/Code/digital-nudge-tool/src/components/answers_mapped.js":"10"},{"size":708,"mtime":1698685020642,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1691980112813,"results":"13","hashOfConfig":"12"},{"size":7749,"mtime":1698690512392,"results":"14","hashOfConfig":"12"},{"size":845,"mtime":1698684761081,"results":"15","hashOfConfig":"12"},{"size":1339,"mtime":1697756270244,"results":"16","hashOfConfig":"12"},{"size":2003,"mtime":1698335616808,"results":"17","hashOfConfig":"12"},{"size":337,"mtime":1697914674621,"results":"18","hashOfConfig":"12"},{"size":537,"mtime":1697756270243,"results":"19","hashOfConfig":"12"},{"size":1520,"mtime":1698267049042,"results":"20","hashOfConfig":"12"},{"size":2207,"mtime":1698684779119,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},"1uxq7j2",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/vicenteriquelme/Code/digital-nudge-tool/src/index.js",["56"],[],"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport Main from './Main';\nimport reportWebVitals from './reportWebVitals';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { BrowserRouter } from \"react-router-dom\"\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\nroot.render(\n  // <React.StrictMode>\n    <BrowserRouter>\n    <Main />\n    </BrowserRouter>\n  // </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","/Users/vicenteriquelme/Code/digital-nudge-tool/src/reportWebVitals.js",[],[],"/Users/vicenteriquelme/Code/digital-nudge-tool/src/App.js",["57","58","59","60","61","62","63","64"],[],"import React, { useState, setState, Component } from \"react\";\n// import { View, FlatList, StyleSheet, Text, Dimensions } from \"react-native\";\n// import * as React from 'react';  \nimport styles from \"./App.css\";\nimport getQuestions from './components/questions.js'\nimport getPrompts from \"./components/medicalTexts\";\n// import getPopup from \"./components/popup\";\n// import alertMode from \"./components/alertMode\";\nimport PopupAlert from \"./components/popupAlert\";\nimport { useParams } from \"react-router-dom\"\nimport getDisclaimer from \"./components/disclaimer.js\";\n\n// import { BrowserRouter as Router } from 'react-router-dom';\n\n\nfunction App({ chatgpt, popup }) {\n\n\n  const [UsePopups, setUsePopups] = useState(popup);\n  const [UseChatGPTDisclaimer, setUseChatGPTDisclaimer] = useState(chatgpt);\n\n  // const handleChatGPT = () => setUseChatGPTDisclaimer(true)\n  // const handlePopup = () => setUsePopups(true);\n\n  // const [useFreq, setFreq] = useState(false);\n  // const [freqCounter, setFreqCounter] = useState(0);\n\n\n  // const handleFreq = () => {\n  //   //Query Model to determine whether to show or not\n  // }\n\n\n  let { id } = useParams()\n\n  // console.log(id)\n\n\n  // Properties\n  const [showResults, setShowResults] = useState(false);\n  const [showEndScreen, setShowEndScreen] = useState(false);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showPopups, setShowPopup] = useState(true);\n  const [key] = useState(0);\n  const responses = [];\n  const [score, setScore] = useState(0);\n  const [selectedAnswerIndex, setSelectedAnswerIndex] = useState(null)\n  const [acceptedOrNot, setAcceptedOrNot] = useState(false)\n\n  const questions = getQuestions();\n  const prompts = getPrompts();\n\n  const post_disclaimer = getDisclaimer();\n\n  // Helper Functions\n  const handleClose = () => setShowPopup(false);\n  const handleShow = () => setShowPopup(true);\n  \n\n  const disclaimer = \" ChatGPT should not be used to make medical decisions.\"\n\n\n  const scrollToTop = () => {\n    console.log(\"scrolled\")\n    window.scrollTo({ top: 0});\n    onClickNext()\n  };\n\n  // TODO: Change this func to record string of answer instead of id.\n  const onClickNext = () => {\n    console.log({ question_id: currentQuestion, answer_key: selectedAnswerIndex });\n    localStorage.setItem(questions[currentQuestion].code, questions[currentQuestion].options[selectedAnswerIndex].text);\n    // window.scrollTo({ top: 0});\n\n    // scrollToTop();\n    if (currentQuestion + 1 < prompts.length) {\n      setCurrentQuestion(currentQuestion + 1);\n      handleShow();\n      setSelectedAnswerIndex(null);\n      // console.log(showPopups);\n    } else {\n      setShowResults(true);\n    }\n  }\n\n  class AnswerButton extends Component {\n    onAnswerSelected() {\n      setSelectedAnswerIndex(this.props.option.id)\n    }\n\n    render() {\n\n      return (\n        <li\n          key={this.props.option.id}\n          onClick={() => this.onAnswerSelected()}\n          className={selectedAnswerIndex === this.props.option.id ? 'selected-answer' : null}\n        >\n          {this.props.option.text}\n        </li>);\n\n    }\n  }\n\n  /* Resets the game back to default */\n  const restartGame = () => {\n    // setScore(0);\n    setCurrentQuestion(0);\n    setShowResults(false);\n    setSelectedAnswerIndex(null)\n    handleShow();\n  };\n\n  const acceptedRestart = () => {\n    // setScore(0);\n    setCurrentQuestion(0);\n    // setShowResults(false);\n    setSelectedAnswerIndex(null)\n    // handleShow();\n    storeHistory();\n    setShowEndScreen(true)\n    setAcceptedOrNot(true)\n  };\n\n  const declinedRestart = () => {\n    // setScore(0);\n    setCurrentQuestion(0);\n    // setShowResults(false);\n    setSelectedAnswerIndex(null);\n    // handleShow();\n    setShowEndScreen(true)\n  };\n\n  \n\n\n\n  const storeHistory = async () => {\n    const history = {...localStorage};\n    console.log(history);\n\n    console.log(\"api call\")\n\n    const response = await fetch('/api/sql', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify([id,history])\n    });\n\n    console.log(response)\n\n    // const body = await response.text();\n\n    localStorage.clear();\n\n    // Push history to database\n\n  }\n  return (\n    <div className=\"App\">\n      {/* 1. Header  */}\n      <div className=\"title-box\" id=\"title\">\n        <h1 className='title'> AI Reading Survey </h1>\n      </div>\n\n\n      {/* 2. Show finished page or show the question game  */}\n\n\n\n\n      {showResults ? (\n        // storeHistory(),\n        /* 3. Final Results */\n        <div className=\"final-results\">\n          {showEndScreen ? (\n            <div> \n           <h1>Thank you for taking the survey!</h1>\n           {acceptedOrNot ? (<h1>You have chosen to accept the terms and your response has been recorded.</h1>\n):(<h1>You have chosen to not accept the terms. Your answers have not been recorded.</h1>)}\n            </div>\n          ):(\n            <div className=\"disclaimer-box\">\n            <h2 className=\"disclaimer-text\" style={{fontWeight: \"bold\"}}>\n            Please don't believe anything we just showed you. \n            <br/><br/>\n            </h2>\n            <h3 className=\"disclaimer-text\">\n            {post_disclaimer}\n            </h3>\n        <button className=\"restart-button accept-button\" onClick={() => acceptedRestart()}>I accept</button>\n        <button className=\"restart-button reject-button\" onClick={() => declinedRestart()}>I don't accept </button>\n        </div>\n          )}\n\n        </div>\n      ) : (\n        [\n          <div className=\"Main\">\n            <div className=\"main-box\">\n              <div className={styles.gptBox}>\n                <div className=\"scenario-box\">\n                  <h2 className=\"scenario-text\">Scenario {currentQuestion + 1} out of {prompts.length}:</h2>\n                </div>\n                <div className=\"prompt-box\">\n                  <div className=\"text-box\">\n                    <h2 className=\"gpt-text\">{prompts[currentQuestion].prompt}</h2>\n                  </div>\n                  <div className=\"gpt-image\"> <img src={require(\"./Person-bubble.jpeg\")} alt=\"Person\" style={{ maxWidth: 60 }}></img></div>\n                </div>\n                <div className=\"answer-box\">\n                  <div className=\"medical-text-box\">\n                    <div className=\"gpt-image\"> <img src={require(\"./GPT-logo.jpeg\")} alt=\"gpt Logo\" style={{ maxWidth: 50 }}></img></div>\n                    {UseChatGPTDisclaimer ? (<h3 className=\"gpt-text\">{prompts[currentQuestion].text}{disclaimer} </h3>) : (<h3 className=\"gpt-text\">{prompts[currentQuestion].text}</h3>)}\n\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>,\n\n          /* 5. Question Card  */\n          <div className=\"question-card\">\n            {/* Current Question  */}\n            <h2 className=\"question-text\">\n              Question: {currentQuestion + 1} out of {prompts.length}\n            </h2>\n            <h3 className=\"question-text\">{questions[currentQuestion].text}</h3>\n\n            {/* List of possible answers  */}\n            <ul>\n              {questions[currentQuestion].options.map((option) => {\n                return (\n                  <AnswerButton option={option} />\n                );\n              })}\n            </ul>\n            <div className=\"button-box\">\n              <button className=\"next-button\" onClick={onClickNext} disabled={selectedAnswerIndex === null}> Next </button>\n              <button onClick={scrollToTop}>Scroll to top</button>\n            </div>\n          </div>\n        ])}\n\n      {UsePopups ?\n        (<PopupAlert showPopupMode={showPopups} closeModal={handleClose} openModal={handleShow} />\n        ) : (null)}\n\n    </div>\n\n  );\n}\n\nexport default App;","/Users/vicenteriquelme/Code/digital-nudge-tool/src/components/questions.js",[],[],"/Users/vicenteriquelme/Code/digital-nudge-tool/src/components/popupAlert.js",["65","66"],[],"// import Modal from \"react-bootstrap/Modal\";\n\nimport { useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport styles from \"./popupstyles.css\"\n\nfunction PopupAlert({showPopupMode, closeModal, openModal}) {\n  // let [show, setShow] = useState({showPopupMode});\n  // const handleClose = () => setShow(false);\n  // const handleShow = () => setShow(true);\n\n  // if (show) {\n  //     handleShow();\n  // }\n\n  // console.log(show)\n\n  return (\n    <>\n      {/* <div onClick={handleShow}>\n      </div> */}\n\n      <Modal\n        show={showPopupMode}\n        onHide={closeModal}\n        backdrop=\"static\"\n        centered={true}\n        keyboard={false}\n        dialogClassName=\"popup-modal\"\n      >\n        <Modal.Header closeButton>\n          <Modal.Title style={{color: 'black'}}>Alert</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <p style={{color: 'black'}}>ChatGPT sometimes writes plausible-sounding but incorrect answers. Does this information seem accurate?</p>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={closeModal}>\n            Continue\n          </Button>\n          {/* <Button variant=\"primary\">Understood</Button> */}\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n}\n\nexport default PopupAlert;","/Users/vicenteriquelme/Code/digital-nudge-tool/src/components/medicalTexts.js",[],[],"/Users/vicenteriquelme/Code/digital-nudge-tool/src/components/answers.js",[],[],"/Users/vicenteriquelme/Code/digital-nudge-tool/src/Main.js",["67"],[],"import App from './App';\n\nimport { Route, Routes, useParams} from \"react-router-dom\"\n\n\n\nfunction Main() {\n    // console.log(useParams())\n\n    return (\n        <Routes>\n        <Route path=\"/1/:id\" element={<App chatgpt={false} popup={false}/>} />\n        <Route path=\"/2/:id\" element={<App chatgpt={true} popup={false} />} />  \n        <Route path=\"/3/:id\" element={<App chatgpt={false} popup={true} />} />\n        <Route path=\"/4/:id\" element={<App chatgpt={true} popup={true} />}/>\n      </Routes>\n      );\n  }\n\n  export default Main;","/Users/vicenteriquelme/Code/digital-nudge-tool/src/components/disclaimer.js",[],[],"/Users/vicenteriquelme/Code/digital-nudge-tool/src/components/answers_mapped.js",[],[],{"ruleId":"68","severity":1,"message":"69","line":4,"column":8,"nodeType":"70","messageId":"71","endLine":4,"endColumn":11},{"ruleId":"68","severity":1,"message":"72","line":1,"column":27,"nodeType":"70","messageId":"71","endLine":1,"endColumn":35},{"ruleId":"68","severity":1,"message":"73","line":19,"column":21,"nodeType":"70","messageId":"71","endLine":19,"endColumn":33},{"ruleId":"68","severity":1,"message":"74","line":20,"column":32,"nodeType":"70","messageId":"71","endLine":20,"endColumn":55},{"ruleId":"68","severity":1,"message":"75","line":44,"column":10,"nodeType":"70","messageId":"71","endLine":44,"endColumn":13},{"ruleId":"68","severity":1,"message":"76","line":45,"column":9,"nodeType":"70","messageId":"71","endLine":45,"endColumn":18},{"ruleId":"68","severity":1,"message":"77","line":46,"column":10,"nodeType":"70","messageId":"71","endLine":46,"endColumn":15},{"ruleId":"68","severity":1,"message":"78","line":46,"column":17,"nodeType":"70","messageId":"71","endLine":46,"endColumn":25},{"ruleId":"68","severity":1,"message":"79","line":106,"column":9,"nodeType":"70","messageId":"71","endLine":106,"endColumn":20},{"ruleId":"68","severity":1,"message":"80","line":3,"column":10,"nodeType":"70","messageId":"71","endLine":3,"endColumn":18},{"ruleId":"68","severity":1,"message":"81","line":6,"column":8,"nodeType":"70","messageId":"71","endLine":6,"endColumn":14},{"ruleId":"68","severity":1,"message":"82","line":3,"column":25,"nodeType":"70","messageId":"71","endLine":3,"endColumn":34},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","'setState' is defined but never used.","'setUsePopups' is assigned a value but never used.","'setUseChatGPTDisclaimer' is assigned a value but never used.","'key' is assigned a value but never used.","'responses' is assigned a value but never used.","'score' is assigned a value but never used.","'setScore' is assigned a value but never used.","'restartGame' is assigned a value but never used.","'useState' is defined but never used.","'styles' is defined but never used.","'useParams' is defined but never used."]