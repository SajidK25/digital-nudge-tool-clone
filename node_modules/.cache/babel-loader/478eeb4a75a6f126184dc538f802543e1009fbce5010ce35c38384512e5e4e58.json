{"ast":null,"code":"import _regeneratorRuntime from\"/Users/vicenteriquelme/Code/digital-nudge-tool-clone/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _objectSpread from\"/Users/vicenteriquelme/Code/digital-nudge-tool-clone/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _asyncToGenerator from\"/Users/vicenteriquelme/Code/digital-nudge-tool-clone/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _classCallCheck from\"/Users/vicenteriquelme/Code/digital-nudge-tool-clone/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/Users/vicenteriquelme/Code/digital-nudge-tool-clone/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _inherits from\"/Users/vicenteriquelme/Code/digital-nudge-tool-clone/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"/Users/vicenteriquelme/Code/digital-nudge-tool-clone/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import _slicedToArray from\"/Users/vicenteriquelme/Code/digital-nudge-tool-clone/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,setState,Component}from\"react\";// import { View, FlatList, StyleSheet, Text, Dimensions } from \"react-native\";\n// import * as React from 'react';  \nimport styles from\"./App.css\";import getQuestions from'./components/questions.js';import getPrompts from\"./components/medicalTexts\";// import getPopup from \"./components/popup\";\n// import alertMode from \"./components/alertMode\";\nimport PopupAlert from\"./components/popupAlert\";import{useParams}from\"react-router-dom\";import getDisclaimer from\"./components/disclaimer.js\";// import { BrowserRouter as Router } from 'react-router-dom';\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(_ref){var chatgpt=_ref.chatgpt,popup=_ref.popup;var _useState=useState(popup),_useState2=_slicedToArray(_useState,2),UsePopups=_useState2[0],setUsePopups=_useState2[1];var _useState3=useState(chatgpt),_useState4=_slicedToArray(_useState3,2),UseChatGPTDisclaimer=_useState4[0],setUseChatGPTDisclaimer=_useState4[1];// const handleChatGPT = () => setUseChatGPTDisclaimer(true)\n// const handlePopup = () => setUsePopups(true);\n// const [useFreq, setFreq] = useState(false);\n// const [freqCounter, setFreqCounter] = useState(0);\n// const handleFreq = () => {\n//   //Query Model to determine whether to show or not\n// }\nvar _useParams=useParams(),id=_useParams.id;// console.log(id)\n// Properties\nvar _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),showResults=_useState6[0],setShowResults=_useState6[1];var _useState7=useState(false),_useState8=_slicedToArray(_useState7,2),showEndScreen=_useState8[0],setShowEndScreen=_useState8[1];var _useState9=useState(0),_useState10=_slicedToArray(_useState9,2),currentQuestion=_useState10[0],setCurrentQuestion=_useState10[1];var _useState11=useState(true),_useState12=_slicedToArray(_useState11,2),showPopups=_useState12[0],setShowPopup=_useState12[1];var _useState13=useState(0),_useState14=_slicedToArray(_useState13,1),key=_useState14[0];var responses=[];var _useState15=useState(0),_useState16=_slicedToArray(_useState15,2),score=_useState16[0],setScore=_useState16[1];var _useState17=useState(null),_useState18=_slicedToArray(_useState17,2),selectedAnswerIndex=_useState18[0],setSelectedAnswerIndex=_useState18[1];var _useState19=useState(false),_useState20=_slicedToArray(_useState19,2),acceptedOrNot=_useState20[0],setAcceptedOrNot=_useState20[1];var questions=getQuestions();var prompts=getPrompts();var post_disclaimer=getDisclaimer();// Helper Functions\nvar handleClose=function handleClose(){return setShowPopup(false);};var handleShow=function handleShow(){return setShowPopup(true);};var disclaimer=\" ChatGPT should not be used to make medical decisions.\";var scrollToTop=function scrollToTop(){console.log(\"scrolled\");window.scrollTo({top:0});onClickNext();};// TODO: Change this func to record string of answer instead of id.\nvar onClickNext=function onClickNext(){console.log({question_id:currentQuestion,answer_key:selectedAnswerIndex});localStorage.setItem(questions[currentQuestion].code,questions[currentQuestion].options[selectedAnswerIndex].text);// window.scrollTo({ top: 0});\n// scrollToTop();\nif(currentQuestion+1<prompts.length){setCurrentQuestion(currentQuestion+1);handleShow();setSelectedAnswerIndex(null);// console.log(showPopups);\n}else{setShowResults(true);}};var AnswerButton=/*#__PURE__*/function(_Component){_inherits(AnswerButton,_Component);var _super=_createSuper(AnswerButton);function AnswerButton(){_classCallCheck(this,AnswerButton);return _super.apply(this,arguments);}_createClass(AnswerButton,[{key:\"onAnswerSelected\",value:function onAnswerSelected(){setSelectedAnswerIndex(this.props.option.id);}},{key:\"render\",value:function render(){var _this=this;return/*#__PURE__*/_jsx(\"li\",{onClick:function onClick(){return _this.onAnswerSelected();},className:selectedAnswerIndex===this.props.option.id?'selected-answer':null,children:this.props.option.text},this.props.option.id);}}]);return AnswerButton;}(Component);/* Resets the game back to default */var restartGame=function restartGame(){// setScore(0);\nsetCurrentQuestion(0);setShowResults(false);setSelectedAnswerIndex(null);handleShow();};var acceptedRestart=function acceptedRestart(){// setScore(0);\nsetCurrentQuestion(0);// setShowResults(false);\nsetSelectedAnswerIndex(null);// handleShow();\nstoreHistory();setShowEndScreen(true);setAcceptedOrNot(true);};var declinedRestart=function declinedRestart(){// setScore(0);\nsetCurrentQuestion(0);// setShowResults(false);\nsetSelectedAnswerIndex(null);// handleShow();\nsetShowEndScreen(true);};var storeHistory=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var history,response;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:history=_objectSpread({},localStorage);console.log(history);console.log(\"api call\");_context.next=5;return fetch('/api/sql',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify([id,history])});case 5:response=_context.sent;console.log(response);// const body = await response.text();\nlocalStorage.clear();// Push history to database\ncase 8:case\"end\":return _context.stop();}},_callee);}));return function storeHistory(){return _ref2.apply(this,arguments);};}();return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"title-box\",id:\"title\",children:/*#__PURE__*/_jsx(\"h1\",{className:\"title\",children:\" AI Reading Survey \"})}),showResults?/*#__PURE__*/ // storeHistory(),\n/* 3. Final Results */_jsx(\"div\",{className:\"final-results\",children:showEndScreen?/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Thank you for taking the survey!\"}),acceptedOrNot?/*#__PURE__*/_jsx(\"h1\",{children:\"You have chosen to accept the terms and your response has been recorded.\"}):/*#__PURE__*/_jsx(\"h1\",{children:\"You have chosen to not accept the terms. Your answers have not been recorded.\"})]}):/*#__PURE__*/_jsxs(\"div\",{className:\"disclaimer-box\",children:[/*#__PURE__*/_jsxs(\"h2\",{className:\"disclaimer-text\",style:{fontWeight:\"bold\"},children:[\"Please don't believe anything we just showed you.\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{})]}),/*#__PURE__*/_jsx(\"h3\",{className:\"disclaimer-text\",children:post_disclaimer}),/*#__PURE__*/_jsx(\"button\",{className:\"restart-button accept-button\",onClick:function onClick(){return acceptedRestart();},children:\"I accept\"}),/*#__PURE__*/_jsx(\"button\",{className:\"restart-button reject-button\",onClick:function onClick(){return declinedRestart();},children:\"I don't accept \"})]})}):[/*#__PURE__*/_jsx(\"div\",{className:\"Main\",children:/*#__PURE__*/_jsx(\"div\",{className:\"main-box\",children:/*#__PURE__*/_jsxs(\"div\",{className:styles.gptBox,children:[/*#__PURE__*/_jsx(\"div\",{className:\"scenario-box\",children:/*#__PURE__*/_jsxs(\"h2\",{className:\"scenario-text\",children:[\"Scenario \",currentQuestion+1,\" out of \",prompts.length,\":\"]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"prompt-box\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"text-box\",children:/*#__PURE__*/_jsx(\"h2\",{className:\"gpt-text\",children:prompts[currentQuestion].prompt})}),/*#__PURE__*/_jsxs(\"div\",{className:\"gpt-image\",children:[\" \",/*#__PURE__*/_jsx(\"img\",{src:require(\"./Person-bubble.jpeg\"),alt:\"Person\",style:{maxWidth:60}})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"answer-box\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"medical-text-box\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"gpt-image\",children:[\" \",/*#__PURE__*/_jsx(\"img\",{src:require(\"./GPT-logo.jpeg\"),alt:\"gpt Logo\",style:{maxWidth:50}})]}),UseChatGPTDisclaimer?/*#__PURE__*/_jsxs(\"h3\",{className:\"gpt-text\",children:[prompts[currentQuestion].text,disclaimer,\" \"]}):/*#__PURE__*/_jsx(\"h3\",{className:\"gpt-text\",children:prompts[currentQuestion].text})]})})]})})}),/*#__PURE__*/ /* 5. Question Card  */_jsxs(\"div\",{className:\"question-card\",children:[/*#__PURE__*/_jsxs(\"h2\",{className:\"question-text\",children:[\"Question: \",currentQuestion+1,\" out of \",prompts.length]}),/*#__PURE__*/_jsx(\"h3\",{className:\"question-text\",children:questions[currentQuestion].text}),/*#__PURE__*/_jsx(\"ul\",{children:questions[currentQuestion].options.map(function(option){return/*#__PURE__*/_jsx(AnswerButton,{option:option});})}),/*#__PURE__*/_jsxs(\"div\",{className:\"button-box\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"next-button\",onClick:onClickNext,disabled:selectedAnswerIndex===null,children:\" Next \"}),/*#__PURE__*/_jsx(\"button\",{onClick:scrollToTop,children:\"Scroll to top\"})]})]})],UsePopups?/*#__PURE__*/_jsx(PopupAlert,{showPopupMode:showPopups,closeModal:handleClose,openModal:handleShow}):null]});}export default App;","map":{"version":3,"names":["React","useState","setState","Component","styles","getQuestions","getPrompts","PopupAlert","useParams","getDisclaimer","jsx","_jsx","jsxs","_jsxs","App","_ref","chatgpt","popup","_useState","_useState2","_slicedToArray","UsePopups","setUsePopups","_useState3","_useState4","UseChatGPTDisclaimer","setUseChatGPTDisclaimer","_useParams","id","_useState5","_useState6","showResults","setShowResults","_useState7","_useState8","showEndScreen","setShowEndScreen","_useState9","_useState10","currentQuestion","setCurrentQuestion","_useState11","_useState12","showPopups","setShowPopup","_useState13","_useState14","key","responses","_useState15","_useState16","score","setScore","_useState17","_useState18","selectedAnswerIndex","setSelectedAnswerIndex","_useState19","_useState20","acceptedOrNot","setAcceptedOrNot","questions","prompts","post_disclaimer","handleClose","handleShow","disclaimer","scrollToTop","console","log","window","scrollTo","top","onClickNext","question_id","answer_key","localStorage","setItem","code","options","text","length","AnswerButton","_Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","value","onAnswerSelected","props","option","render","_this","onClick","className","children","restartGame","acceptedRestart","storeHistory","declinedRestart","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","history","response","wrap","_callee$","_context","prev","next","_objectSpread","fetch","method","headers","body","JSON","stringify","sent","clear","stop","style","fontWeight","gptBox","prompt","src","require","alt","maxWidth","map","disabled","showPopupMode","closeModal","openModal"],"sources":["/Users/vicenteriquelme/Code/digital-nudge-tool-clone/src/App.js"],"sourcesContent":["import React, { useState, setState, Component } from \"react\";\n// import { View, FlatList, StyleSheet, Text, Dimensions } from \"react-native\";\n// import * as React from 'react';  \nimport styles from \"./App.css\";\nimport getQuestions from './components/questions.js'\nimport getPrompts from \"./components/medicalTexts\";\n// import getPopup from \"./components/popup\";\n// import alertMode from \"./components/alertMode\";\nimport PopupAlert from \"./components/popupAlert\";\nimport { useParams } from \"react-router-dom\"\nimport getDisclaimer from \"./components/disclaimer.js\";\n\n// import { BrowserRouter as Router } from 'react-router-dom';\n\n\nfunction App({ chatgpt, popup }) {\n\n\n  const [UsePopups, setUsePopups] = useState(popup);\n  const [UseChatGPTDisclaimer, setUseChatGPTDisclaimer] = useState(chatgpt);\n\n  // const handleChatGPT = () => setUseChatGPTDisclaimer(true)\n  // const handlePopup = () => setUsePopups(true);\n\n  // const [useFreq, setFreq] = useState(false);\n  // const [freqCounter, setFreqCounter] = useState(0);\n\n\n  // const handleFreq = () => {\n  //   //Query Model to determine whether to show or not\n  // }\n\n\n  let { id } = useParams()\n\n  // console.log(id)\n\n\n  // Properties\n  const [showResults, setShowResults] = useState(false);\n  const [showEndScreen, setShowEndScreen] = useState(false);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showPopups, setShowPopup] = useState(true);\n  const [key] = useState(0);\n  const responses = [];\n  const [score, setScore] = useState(0);\n  const [selectedAnswerIndex, setSelectedAnswerIndex] = useState(null)\n  const [acceptedOrNot, setAcceptedOrNot] = useState(false)\n\n  const questions = getQuestions();\n  const prompts = getPrompts();\n\n  const post_disclaimer = getDisclaimer();\n\n  // Helper Functions\n  const handleClose = () => setShowPopup(false);\n  const handleShow = () => setShowPopup(true);\n  \n\n  const disclaimer = \" ChatGPT should not be used to make medical decisions.\"\n\n\n  const scrollToTop = () => {\n    console.log(\"scrolled\")\n    window.scrollTo({ top: 0});\n    onClickNext()\n  };\n\n  // TODO: Change this func to record string of answer instead of id.\n  const onClickNext = () => {\n    console.log({ question_id: currentQuestion, answer_key: selectedAnswerIndex });\n    localStorage.setItem(questions[currentQuestion].code, questions[currentQuestion].options[selectedAnswerIndex].text);\n    // window.scrollTo({ top: 0});\n\n    // scrollToTop();\n    if (currentQuestion + 1 < prompts.length) {\n      setCurrentQuestion(currentQuestion + 1);\n      handleShow();\n      setSelectedAnswerIndex(null);\n      // console.log(showPopups);\n    } else {\n      setShowResults(true);\n    }\n  }\n\n  class AnswerButton extends Component {\n    onAnswerSelected() {\n      setSelectedAnswerIndex(this.props.option.id)\n    }\n\n    render() {\n\n      return (\n        <li\n          key={this.props.option.id}\n          onClick={() => this.onAnswerSelected()}\n          className={selectedAnswerIndex === this.props.option.id ? 'selected-answer' : null}\n        >\n          {this.props.option.text}\n        </li>);\n\n    }\n  }\n\n  /* Resets the game back to default */\n  const restartGame = () => {\n    // setScore(0);\n    setCurrentQuestion(0);\n    setShowResults(false);\n    setSelectedAnswerIndex(null)\n    handleShow();\n  };\n\n  const acceptedRestart = () => {\n    // setScore(0);\n    setCurrentQuestion(0);\n    // setShowResults(false);\n    setSelectedAnswerIndex(null)\n    // handleShow();\n    storeHistory();\n    setShowEndScreen(true)\n    setAcceptedOrNot(true)\n  };\n\n  const declinedRestart = () => {\n    // setScore(0);\n    setCurrentQuestion(0);\n    // setShowResults(false);\n    setSelectedAnswerIndex(null);\n    // handleShow();\n    setShowEndScreen(true)\n  };\n\n  \n\n\n\n  const storeHistory = async () => {\n    const history = {...localStorage};\n    console.log(history);\n\n    console.log(\"api call\")\n\n    const response = await fetch('/api/sql', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify([id,history])\n    });\n\n    console.log(response)\n\n    // const body = await response.text();\n\n    localStorage.clear();\n\n    // Push history to database\n\n  }\n  return (\n    <div className=\"App\">\n      {/* 1. Header  */}\n      <div className=\"title-box\" id=\"title\">\n        <h1 className='title'> AI Reading Survey </h1>\n      </div>\n\n\n      {/* 2. Show finished page or show the question game  */}\n\n\n\n\n      {showResults ? (\n        // storeHistory(),\n        /* 3. Final Results */\n        <div className=\"final-results\">\n          {showEndScreen ? (\n            <div> \n           <h1>Thank you for taking the survey!</h1>\n           {acceptedOrNot ? (<h1>You have chosen to accept the terms and your response has been recorded.</h1>\n):(<h1>You have chosen to not accept the terms. Your answers have not been recorded.</h1>)}\n            </div>\n          ):(\n            <div className=\"disclaimer-box\">\n            <h2 className=\"disclaimer-text\" style={{fontWeight: \"bold\"}}>\n            Please don't believe anything we just showed you. \n            <br/><br/>\n            </h2>\n            <h3 className=\"disclaimer-text\">\n            {post_disclaimer}\n            </h3>\n        <button className=\"restart-button accept-button\" onClick={() => acceptedRestart()}>I accept</button>\n        <button className=\"restart-button reject-button\" onClick={() => declinedRestart()}>I don't accept </button>\n        </div>\n          )}\n\n        </div>\n      ) : (\n        [\n          <div className=\"Main\">\n            <div className=\"main-box\">\n              <div className={styles.gptBox}>\n                <div className=\"scenario-box\">\n                  <h2 className=\"scenario-text\">Scenario {currentQuestion + 1} out of {prompts.length}:</h2>\n                </div>\n                <div className=\"prompt-box\">\n                  <div className=\"text-box\">\n                    <h2 className=\"gpt-text\">{prompts[currentQuestion].prompt}</h2>\n                  </div>\n                  <div className=\"gpt-image\"> <img src={require(\"./Person-bubble.jpeg\")} alt=\"Person\" style={{ maxWidth: 60 }}></img></div>\n                </div>\n                <div className=\"answer-box\">\n                  <div className=\"medical-text-box\">\n                    <div className=\"gpt-image\"> <img src={require(\"./GPT-logo.jpeg\")} alt=\"gpt Logo\" style={{ maxWidth: 50 }}></img></div>\n                    {UseChatGPTDisclaimer ? (<h3 className=\"gpt-text\">{prompts[currentQuestion].text}{disclaimer} </h3>) : (<h3 className=\"gpt-text\">{prompts[currentQuestion].text}</h3>)}\n\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>,\n\n          /* 5. Question Card  */\n          <div className=\"question-card\">\n            {/* Current Question  */}\n            <h2 className=\"question-text\">\n              Question: {currentQuestion + 1} out of {prompts.length}\n            </h2>\n            <h3 className=\"question-text\">{questions[currentQuestion].text}</h3>\n\n            {/* List of possible answers  */}\n            <ul>\n              {questions[currentQuestion].options.map((option) => {\n                return (\n                  <AnswerButton option={option} />\n                );\n              })}\n            </ul>\n            <div className=\"button-box\">\n              <button className=\"next-button\" onClick={onClickNext} disabled={selectedAnswerIndex === null}> Next </button>\n              <button onClick={scrollToTop}>Scroll to top</button>\n            </div>\n          </div>\n        ])}\n\n      {UsePopups ?\n        (<PopupAlert showPopupMode={showPopups} closeModal={handleClose} openModal={handleShow} />\n        ) : (null)}\n\n    </div>\n\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}