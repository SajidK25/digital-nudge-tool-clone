{"ast":null,"code":"var _jsxFileName = \"/Users/vicenteriquelme/Code/digital-nudge-tool/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, setState, Component } from \"react\";\n// import { View, FlatList, StyleSheet, Text, Dimensions } from \"react-native\";\n// import * as React from 'react';  \nimport styles from \"./App.css\";\nimport getQuestions from './components/questions.js';\nimport getPrompts from \"./components/medicalTexts\";\n// import getPopup from \"./components/popup\";\n// import alertMode from \"./components/alertMode\";\nimport PopupAlert from \"./components/popupAlert\";\nimport { useParams } from \"react-router-dom\";\n\n// import { BrowserRouter as Router } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App({\n  chatgpt,\n  popup\n}) {\n  _s();\n  const [UsePopups, setUsePopups] = useState(popup);\n  const [UseChatGPTDisclaimer, setUseChatGPTDisclaimer] = useState(chatgpt);\n  const handleChatGPT = () => setUseChatGPTDisclaimer(true);\n  const handlePopup = () => setUsePopups(true);\n  let {\n    id\n  } = useParams();\n  console.log(id);\n\n  // Properties\n  const [showResults, setShowResults] = useState(false);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showPopups, setShowPopup] = useState(true);\n  const [key] = useState(0);\n  const responses = [];\n  const [score, setScore] = useState(0);\n  const questions = getQuestions();\n  const prompts = getPrompts();\n\n  // Helper Functions\n\n  const handleClose = () => setShowPopup(false);\n  const handleShow = () => setShowPopup(true);\n  const disclaimer = \" ChatGPT should not be used to make medical decisions.\";\n  class AnswerButton extends Component {\n    constructor(props) {\n      super(props);\n      // this.state = {\n      //   history: [\n\n      //   ]\n      // }\n    }\n\n    optionClicked() {\n      console.log({\n        question_id: currentQuestion,\n        answer_key: this.props.option.id\n      });\n      localStorage.setItem(currentQuestion, this.props.option.id);\n      if (currentQuestion + 1 < prompts.length) {\n        setCurrentQuestion(currentQuestion + 1);\n        handleShow();\n        // console.log(showPopups);\n      } else {\n        setShowResults(true);\n      }\n    }\n    render() {\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => this.optionClicked(),\n        children: this.props.option.text\n      }, this.props.option.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n  /* Resets the game back to default */\n  const restartGame = () => {\n    // setScore(0);\n    setCurrentQuestion(0);\n    setShowResults(false);\n    handleShow();\n  };\n  const storeHistory = async () => {\n    const history = {\n      ...localStorage\n    };\n    console.log(history);\n    const response = await fetch('/api/sql', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      id: id,\n      body: JSON.stringify({\n        history\n      })\n    });\n    const body = await response.text();\n    localStorage.clear();\n\n    // Push history to database\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \" Medical AI \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), showResults ? (storeHistory(),\n    /*#__PURE__*/\n    /* 3. Final Results */\n    _jsxDEV(\"div\", {\n      className: \"final-results\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Thank you for taking the survey!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => restartGame(),\n        children: \"Restart game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)) : [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Main\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.gptBox,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"prompt-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"gpt-image\",\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"./Person-outline.png\",\n              alt: \"Person\",\n              style: {\n                minWidth: 100\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 45\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"gpt-text\",\n            children: prompts[currentQuestion].prompt\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"medical-text-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"gpt-image\",\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"./GPT-logo.jpeg\",\n              alt: \"gpt Logo\",\n              style: {\n                minWidth: 100\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 45\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 17\n          }, this), UseChatGPTDisclaimer ? /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"gpt-text\",\n            children: [prompts[currentQuestion].text, disclaimer, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 42\n          }, this) : /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"gpt-text\",\n            children: prompts[currentQuestion].text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 121\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 11\n    }, this),\n    /*#__PURE__*/\n    /* 5. Question Card  */\n    _jsxDEV(\"div\", {\n      className: \"question-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"question-text\",\n        children: [\"Question: \", currentQuestion + 1, \" out of \", prompts.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"question-text\",\n        children: questions[currentQuestion].text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: questions[currentQuestion].options.map(option => {\n          return /*#__PURE__*/_jsxDEV(AnswerButton, {\n            option: option\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 19\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 11\n    }, this)], UsePopups ? /*#__PURE__*/_jsxDEV(PopupAlert, {\n      showPopupMode: showPopups,\n      closeModal: handleClose,\n      openModal: handleShow\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 12\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"gV41B3WcGV2DbGwrbWYGCTr7+dk=\", false, function () {\n  return [useParams];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","setState","Component","styles","getQuestions","getPrompts","PopupAlert","useParams","jsxDEV","_jsxDEV","App","chatgpt","popup","_s","UsePopups","setUsePopups","UseChatGPTDisclaimer","setUseChatGPTDisclaimer","handleChatGPT","handlePopup","id","console","log","showResults","setShowResults","currentQuestion","setCurrentQuestion","showPopups","setShowPopup","key","responses","score","setScore","questions","prompts","handleClose","handleShow","disclaimer","AnswerButton","constructor","props","optionClicked","question_id","answer_key","option","localStorage","setItem","length","render","onClick","children","text","fileName","_jsxFileName","lineNumber","columnNumber","restartGame","storeHistory","history","response","fetch","method","headers","body","JSON","stringify","clear","className","gptBox","src","alt","style","minWidth","prompt","options","map","showPopupMode","closeModal","openModal","_c","$RefreshReg$"],"sources":["/Users/vicenteriquelme/Code/digital-nudge-tool/src/App.js"],"sourcesContent":["import React, { useState, setState, Component } from \"react\";\n// import { View, FlatList, StyleSheet, Text, Dimensions } from \"react-native\";\n// import * as React from 'react';  \nimport styles from \"./App.css\";\nimport getQuestions from './components/questions.js'\nimport getPrompts from \"./components/medicalTexts\";\n// import getPopup from \"./components/popup\";\n// import alertMode from \"./components/alertMode\";\nimport PopupAlert from \"./components/popupAlert\";\nimport {useParams} from \"react-router-dom\"\n\n\n// import { BrowserRouter as Router } from 'react-router-dom';\n\n\nfunction App({chatgpt, popup}) {\n\n\n  const [UsePopups, setUsePopups] = useState(popup);\n  const [UseChatGPTDisclaimer ,setUseChatGPTDisclaimer] = useState(chatgpt);\n\n  const handleChatGPT = () => setUseChatGPTDisclaimer(true)\n  const handlePopup = () => setUsePopups(true);\n\n\n  let {id} = useParams()\n\n  console.log(id)\n\n\n  // Properties\n  const [showResults, setShowResults] = useState(false);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showPopups, setShowPopup] = useState(true);\n  const [key] = useState(0);\n  const responses = [];\n  const [score, setScore] = useState(0);\n\n  const questions = getQuestions();\n  const prompts = getPrompts();\n\n  // Helper Functions\n\n  const handleClose = () => setShowPopup(false);\n  const handleShow = () => setShowPopup(true);\n\n  const disclaimer = \" ChatGPT should not be used to make medical decisions.\"\n\n  class AnswerButton extends Component {\n    constructor(props) {\n      super(props);\n      // this.state = {\n      //   history: [\n          \n      //   ]\n      // }\n    }\n    optionClicked() {\n      console.log({question_id: currentQuestion, answer_key: this.props.option.id});\n\n\n      localStorage.setItem(currentQuestion, this.props.option.id);\n\n      if (currentQuestion + 1 < prompts.length) {\n        setCurrentQuestion(currentQuestion + 1);\n        handleShow();\n        // console.log(showPopups);\n      } else {\n        setShowResults(true);\n      }\n    };\n\n    render() {\n      \n      return (\n        <li\n          key={this.props.option.id}\n          onClick={() => this.optionClicked()}\n        >\n          {this.props.option.text}\n        </li>);\n\n    }\n  }\n\n  /* Resets the game back to default */\n  const restartGame = () => {\n    // setScore(0);\n    setCurrentQuestion(0);\n    setShowResults(false);\n    handleShow();\n  };\n\n  const storeHistory = async () => {\n    const history = {...localStorage};\n    console.log(history);\n\n    const response = await fetch('/api/sql', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      id: id,\n      body: JSON.stringify({ history }),\n    });\n    const body = await response.text();\n\n    localStorage.clear();\n\n    // Push history to database\n\n  }\n  return (\n    <div className=\"App\">\n      {/* 1. Header  */}\n      <h1 className='title'> Medical AI </h1>\n\n      {/* 2. Show finished page or show the question game  */}\n      {showResults ? (\n        storeHistory(),\n      /* 3. Final Results */\n      <div className=\"final-results\">\n        <h1>Thank you for taking the survey!</h1>\n        <button onClick={() => restartGame()}>Restart game</button>\n      </div>\n      ) : (\n        [ \n          <div className='Main'>\n            <div className={styles.gptBox}>\n              <div className=\"prompt-box\">\n                <div className=\"gpt-image\"> <img src='./Person-outline.png' alt=\"Person\" style={{ minWidth: 100 }}></img></div>\n                <h2 className=\"gpt-text\">{prompts[currentQuestion].prompt}</h2>\n              </div>\n              <div className=\"medical-text-box\">\n                <div className=\"gpt-image\"> <img src='./GPT-logo.jpeg' alt=\"gpt Logo\" style={{ minWidth: 100 }}></img></div>\n                {/* <alertMode state=\"Mode1\"></alertMode> */}\n\n                {/* TODO */}\n                {UseChatGPTDisclaimer ? (<h3 className=\"gpt-text\">{prompts[currentQuestion].text}{disclaimer} </h3>) : (<h3 className=\"gpt-text\">{prompts[currentQuestion].text}</h3>)} \n\n              </div>\n            </div>\n          </div>,\n\n          /* 5. Question Card  */\n          <div className=\"question-card\">\n            {/* Current Question  */}\n            <h2 className=\"question-text\">\n              Question: {currentQuestion + 1} out of {prompts.length}\n            </h2>\n            <h3 className=\"question-text\">{questions[currentQuestion].text}</h3>\n\n            {/* List of possible answers  */}\n            <ul>\n              {questions[currentQuestion].options.map((option) => {\n                return (\n                  <AnswerButton option={option} />\n                );\n              })}\n            </ul>\n          </div>\n        ])}\n\n        {UsePopups ? \n          (<PopupAlert showPopupMode={showPopups} closeModal={handleClose} openModal={handleShow} />\n            ) :(null)}\n\n    </div>\n\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}